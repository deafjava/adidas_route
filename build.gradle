buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath('gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.13.0')
	}
}

allprojects {
	group = 'com.adidas'
	version = '1.0.0'

	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'io.spring.dependency-management'

	sourceCompatibility = 1.8

	repositories {
		mavenCentral()
		maven {
			url 'https://repo.spring.io/libs-milestone'
		}
	}
	dependencyManagement {
		imports {
			mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
		}

	}
	dependencies {
		compile('org.springframework.boot:spring-boot-starter-data-jpa')
		runtime('org.springframework.boot:spring-boot-devtools')
		runtime('mysql:mysql-connector-java')
		compile("com.fasterxml.jackson.core:jackson-databind")
		compileOnly('org.projectlombok:lombok')
		testCompile('org.testng:testng:6.14.3')
		testCompile('org.mockito:mockito-core')
		testCompile('org.springframework.boot:spring-boot-starter-test')

	}
}


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

group = 'com.adidas'
version = '1.0.0'
sourceCompatibility = 1.8

docker {
	dependsOn build
	name "${project.group}/${bootJar.baseName}"
	files bootJar.archivePath
	buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

repositories {
	mavenCentral()
}


ext {
	springCloudVersion = 'Finchley.SR1'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
	compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.flywaydb:flyway-core')
	compile project(":database")
	runtime('org.springframework.boot:spring-boot-devtools')
	runtime('com.h2database:h2')
	runtime('mysql:mysql-connector-java')
	compileOnly('org.projectlombok:lombok')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.testng:testng:6.14.3')
	testCompile('org.mockito:mockito-core')

}

test {
	useTestNG()
	afterTest { desc, result ->
		logger.quiet "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
}
